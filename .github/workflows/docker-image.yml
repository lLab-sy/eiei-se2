name: Deploy to Docker Hub

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}        # AWS region
  ECR_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}                        # The name of the repository in Docker Hub
  ECS_SERVICE: my-ecs-service                   # ECS Service name
  ECS_CLUSTER: my-ecs-cluster                   # ECS Cluster name
  ECS_TASK_DEFINITION: task-definition.json     # ECS task definition (path to json)
  CONTAINER_NAME: backend-container             # Container name inside ECS task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Docker Hub
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build, tag, and push image to Docker Hub
      id: build-image
      run: |
        # Build Docker image
        docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
        
        # Push Docker image to Docker Hub
        docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
        
        # Output the image URL to use in subsequent steps
        echo "image=$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS Task Definition with Docker Hub Image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
